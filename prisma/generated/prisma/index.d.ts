// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  gitHubProjectCard: (where?: GitHubProjectCardWhereInput) => Promise<boolean>;
  gitHubProjectCardItem: (
    where?: GitHubProjectCardItemWhereInput
  ) => Promise<boolean>;
  gitHubProjectColumn: (
    where?: GitHubProjectColumnWhereInput
  ) => Promise<boolean>;
  gitHubRelease: (where?: GitHubReleaseWhereInput) => Promise<boolean>;
  gitHubTag: (where?: GitHubTagWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gitHubProjectCard: (
    where: GitHubProjectCardWhereUniqueInput
  ) => GitHubProjectCardPromise;
  gitHubProjectCards: (
    args?: {
      where?: GitHubProjectCardWhereInput;
      orderBy?: GitHubProjectCardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubProjectCard>;
  gitHubProjectCardsConnection: (
    args?: {
      where?: GitHubProjectCardWhereInput;
      orderBy?: GitHubProjectCardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubProjectCardConnectionPromise;
  gitHubProjectCardItem: (
    where: GitHubProjectCardItemWhereUniqueInput
  ) => GitHubProjectCardItemPromise;
  gitHubProjectCardItems: (
    args?: {
      where?: GitHubProjectCardItemWhereInput;
      orderBy?: GitHubProjectCardItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubProjectCardItem>;
  gitHubProjectCardItemsConnection: (
    args?: {
      where?: GitHubProjectCardItemWhereInput;
      orderBy?: GitHubProjectCardItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubProjectCardItemConnectionPromise;
  gitHubProjectColumn: (
    where: GitHubProjectColumnWhereUniqueInput
  ) => GitHubProjectColumnPromise;
  gitHubProjectColumns: (
    args?: {
      where?: GitHubProjectColumnWhereInput;
      orderBy?: GitHubProjectColumnOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubProjectColumn>;
  gitHubProjectColumnsConnection: (
    args?: {
      where?: GitHubProjectColumnWhereInput;
      orderBy?: GitHubProjectColumnOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubProjectColumnConnectionPromise;
  gitHubRelease: (where: GitHubReleaseWhereUniqueInput) => GitHubReleasePromise;
  gitHubReleases: (
    args?: {
      where?: GitHubReleaseWhereInput;
      orderBy?: GitHubReleaseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubRelease>;
  gitHubReleasesConnection: (
    args?: {
      where?: GitHubReleaseWhereInput;
      orderBy?: GitHubReleaseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubReleaseConnectionPromise;
  gitHubTag: (where: GitHubTagWhereUniqueInput) => GitHubTagPromise;
  gitHubTags: (
    args?: {
      where?: GitHubTagWhereInput;
      orderBy?: GitHubTagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubTag>;
  gitHubTagsConnection: (
    args?: {
      where?: GitHubTagWhereInput;
      orderBy?: GitHubTagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubTagConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGitHubProjectCard: (
    data: GitHubProjectCardCreateInput
  ) => GitHubProjectCardPromise;
  updateGitHubProjectCard: (
    args: {
      data: GitHubProjectCardUpdateInput;
      where: GitHubProjectCardWhereUniqueInput;
    }
  ) => GitHubProjectCardPromise;
  updateManyGitHubProjectCards: (
    args: {
      data: GitHubProjectCardUpdateManyMutationInput;
      where?: GitHubProjectCardWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubProjectCard: (
    args: {
      where: GitHubProjectCardWhereUniqueInput;
      create: GitHubProjectCardCreateInput;
      update: GitHubProjectCardUpdateInput;
    }
  ) => GitHubProjectCardPromise;
  deleteGitHubProjectCard: (
    where: GitHubProjectCardWhereUniqueInput
  ) => GitHubProjectCardPromise;
  deleteManyGitHubProjectCards: (
    where?: GitHubProjectCardWhereInput
  ) => BatchPayloadPromise;
  createGitHubProjectCardItem: (
    data: GitHubProjectCardItemCreateInput
  ) => GitHubProjectCardItemPromise;
  updateGitHubProjectCardItem: (
    args: {
      data: GitHubProjectCardItemUpdateInput;
      where: GitHubProjectCardItemWhereUniqueInput;
    }
  ) => GitHubProjectCardItemPromise;
  updateManyGitHubProjectCardItems: (
    args: {
      data: GitHubProjectCardItemUpdateManyMutationInput;
      where?: GitHubProjectCardItemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubProjectCardItem: (
    args: {
      where: GitHubProjectCardItemWhereUniqueInput;
      create: GitHubProjectCardItemCreateInput;
      update: GitHubProjectCardItemUpdateInput;
    }
  ) => GitHubProjectCardItemPromise;
  deleteGitHubProjectCardItem: (
    where: GitHubProjectCardItemWhereUniqueInput
  ) => GitHubProjectCardItemPromise;
  deleteManyGitHubProjectCardItems: (
    where?: GitHubProjectCardItemWhereInput
  ) => BatchPayloadPromise;
  createGitHubProjectColumn: (
    data: GitHubProjectColumnCreateInput
  ) => GitHubProjectColumnPromise;
  updateGitHubProjectColumn: (
    args: {
      data: GitHubProjectColumnUpdateInput;
      where: GitHubProjectColumnWhereUniqueInput;
    }
  ) => GitHubProjectColumnPromise;
  updateManyGitHubProjectColumns: (
    args: {
      data: GitHubProjectColumnUpdateManyMutationInput;
      where?: GitHubProjectColumnWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubProjectColumn: (
    args: {
      where: GitHubProjectColumnWhereUniqueInput;
      create: GitHubProjectColumnCreateInput;
      update: GitHubProjectColumnUpdateInput;
    }
  ) => GitHubProjectColumnPromise;
  deleteGitHubProjectColumn: (
    where: GitHubProjectColumnWhereUniqueInput
  ) => GitHubProjectColumnPromise;
  deleteManyGitHubProjectColumns: (
    where?: GitHubProjectColumnWhereInput
  ) => BatchPayloadPromise;
  createGitHubRelease: (data: GitHubReleaseCreateInput) => GitHubReleasePromise;
  updateGitHubRelease: (
    args: {
      data: GitHubReleaseUpdateInput;
      where: GitHubReleaseWhereUniqueInput;
    }
  ) => GitHubReleasePromise;
  updateManyGitHubReleases: (
    args: {
      data: GitHubReleaseUpdateManyMutationInput;
      where?: GitHubReleaseWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubRelease: (
    args: {
      where: GitHubReleaseWhereUniqueInput;
      create: GitHubReleaseCreateInput;
      update: GitHubReleaseUpdateInput;
    }
  ) => GitHubReleasePromise;
  deleteGitHubRelease: (
    where: GitHubReleaseWhereUniqueInput
  ) => GitHubReleasePromise;
  deleteManyGitHubReleases: (
    where?: GitHubReleaseWhereInput
  ) => BatchPayloadPromise;
  createGitHubTag: (data: GitHubTagCreateInput) => GitHubTagPromise;
  updateGitHubTag: (
    args: { data: GitHubTagUpdateInput; where: GitHubTagWhereUniqueInput }
  ) => GitHubTagPromise;
  updateManyGitHubTags: (
    args: {
      data: GitHubTagUpdateManyMutationInput;
      where?: GitHubTagWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubTag: (
    args: {
      where: GitHubTagWhereUniqueInput;
      create: GitHubTagCreateInput;
      update: GitHubTagUpdateInput;
    }
  ) => GitHubTagPromise;
  deleteGitHubTag: (where: GitHubTagWhereUniqueInput) => GitHubTagPromise;
  deleteManyGitHubTags: (where?: GitHubTagWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gitHubProjectCard: (
    where?: GitHubProjectCardSubscriptionWhereInput
  ) => GitHubProjectCardSubscriptionPayloadSubscription;
  gitHubProjectCardItem: (
    where?: GitHubProjectCardItemSubscriptionWhereInput
  ) => GitHubProjectCardItemSubscriptionPayloadSubscription;
  gitHubProjectColumn: (
    where?: GitHubProjectColumnSubscriptionWhereInput
  ) => GitHubProjectColumnSubscriptionPayloadSubscription;
  gitHubRelease: (
    where?: GitHubReleaseSubscriptionWhereInput
  ) => GitHubReleaseSubscriptionPayloadSubscription;
  gitHubTag: (
    where?: GitHubTagSubscriptionWhereInput
  ) => GitHubTagSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GitHubProjectCardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "note_ASC"
  | "note_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GitHubProjectCardItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "title_ASC"
  | "title_DESC"
  | "bodyText_ASC"
  | "bodyText_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GitHubProjectColumnOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "purpose_ASC"
  | "purpose_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GitHubReleaseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "isDraft_ASC"
  | "isDraft_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GitHubTagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GitHubProjectCardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export interface GitHubProjectCardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  gitHubProjectColumn?: GitHubProjectColumnWhereInput;
  gitHubProjectCardContent?: GitHubProjectCardItemWhereInput;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubProjectCardWhereInput[] | GitHubProjectCardWhereInput;
  OR?: GitHubProjectCardWhereInput[] | GitHubProjectCardWhereInput;
  NOT?: GitHubProjectCardWhereInput[] | GitHubProjectCardWhereInput;
}

export interface GitHubProjectColumnWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  gitHubProjectCards_every?: GitHubProjectCardWhereInput;
  gitHubProjectCards_some?: GitHubProjectCardWhereInput;
  gitHubProjectCards_none?: GitHubProjectCardWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  purpose?: String;
  purpose_not?: String;
  purpose_in?: String[] | String;
  purpose_not_in?: String[] | String;
  purpose_lt?: String;
  purpose_lte?: String;
  purpose_gt?: String;
  purpose_gte?: String;
  purpose_contains?: String;
  purpose_not_contains?: String;
  purpose_starts_with?: String;
  purpose_not_starts_with?: String;
  purpose_ends_with?: String;
  purpose_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubProjectColumnWhereInput[] | GitHubProjectColumnWhereInput;
  OR?: GitHubProjectColumnWhereInput[] | GitHubProjectColumnWhereInput;
  NOT?: GitHubProjectColumnWhereInput[] | GitHubProjectColumnWhereInput;
}

export interface GitHubProjectCardItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  bodyText?: String;
  bodyText_not?: String;
  bodyText_in?: String[] | String;
  bodyText_not_in?: String[] | String;
  bodyText_lt?: String;
  bodyText_lte?: String;
  bodyText_gt?: String;
  bodyText_gte?: String;
  bodyText_contains?: String;
  bodyText_not_contains?: String;
  bodyText_starts_with?: String;
  bodyText_not_starts_with?: String;
  bodyText_ends_with?: String;
  bodyText_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubProjectCardItemWhereInput[] | GitHubProjectCardItemWhereInput;
  OR?: GitHubProjectCardItemWhereInput[] | GitHubProjectCardItemWhereInput;
  NOT?: GitHubProjectCardItemWhereInput[] | GitHubProjectCardItemWhereInput;
}

export type GitHubProjectCardItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export type GitHubProjectColumnWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export type GitHubReleaseWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export interface GitHubReleaseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  isDraft?: Boolean;
  isDraft_not?: Boolean;
  publishedAt?: DateTimeInput;
  publishedAt_not?: DateTimeInput;
  publishedAt_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_not_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_lt?: DateTimeInput;
  publishedAt_lte?: DateTimeInput;
  publishedAt_gt?: DateTimeInput;
  publishedAt_gte?: DateTimeInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  gitHubTag?: GitHubTagWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubReleaseWhereInput[] | GitHubReleaseWhereInput;
  OR?: GitHubReleaseWhereInput[] | GitHubReleaseWhereInput;
  NOT?: GitHubReleaseWhereInput[] | GitHubReleaseWhereInput;
}

export interface GitHubTagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  gitHubRelease?: GitHubReleaseWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubTagWhereInput[] | GitHubTagWhereInput;
  OR?: GitHubTagWhereInput[] | GitHubTagWhereInput;
  NOT?: GitHubTagWhereInput[] | GitHubTagWhereInput;
}

export type GitHubTagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export interface GitHubProjectCardCreateInput {
  gitHubId: String;
  gitHubProjectColumn: GitHubProjectColumnCreateOneWithoutGitHubProjectCardsInput;
  gitHubProjectCardContent?: GitHubProjectCardItemCreateOneInput;
  note?: String;
  url: String;
}

export interface GitHubProjectColumnCreateOneWithoutGitHubProjectCardsInput {
  create?: GitHubProjectColumnCreateWithoutGitHubProjectCardsInput;
  connect?: GitHubProjectColumnWhereUniqueInput;
}

export interface GitHubProjectColumnCreateWithoutGitHubProjectCardsInput {
  gitHubId: String;
  name: String;
  purpose?: String;
}

export interface GitHubProjectCardItemCreateOneInput {
  create?: GitHubProjectCardItemCreateInput;
  connect?: GitHubProjectCardItemWhereUniqueInput;
}

export interface GitHubProjectCardItemCreateInput {
  gitHubId: String;
  title: String;
  bodyText: String;
  url: String;
}

export interface GitHubProjectCardUpdateInput {
  gitHubId?: String;
  gitHubProjectColumn?: GitHubProjectColumnUpdateOneRequiredWithoutGitHubProjectCardsInput;
  gitHubProjectCardContent?: GitHubProjectCardItemUpdateOneInput;
  note?: String;
  url?: String;
}

export interface GitHubProjectColumnUpdateOneRequiredWithoutGitHubProjectCardsInput {
  create?: GitHubProjectColumnCreateWithoutGitHubProjectCardsInput;
  update?: GitHubProjectColumnUpdateWithoutGitHubProjectCardsDataInput;
  upsert?: GitHubProjectColumnUpsertWithoutGitHubProjectCardsInput;
  connect?: GitHubProjectColumnWhereUniqueInput;
}

export interface GitHubProjectColumnUpdateWithoutGitHubProjectCardsDataInput {
  gitHubId?: String;
  name?: String;
  purpose?: String;
}

export interface GitHubProjectColumnUpsertWithoutGitHubProjectCardsInput {
  update: GitHubProjectColumnUpdateWithoutGitHubProjectCardsDataInput;
  create: GitHubProjectColumnCreateWithoutGitHubProjectCardsInput;
}

export interface GitHubProjectCardItemUpdateOneInput {
  create?: GitHubProjectCardItemCreateInput;
  update?: GitHubProjectCardItemUpdateDataInput;
  upsert?: GitHubProjectCardItemUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GitHubProjectCardItemWhereUniqueInput;
}

export interface GitHubProjectCardItemUpdateDataInput {
  gitHubId?: String;
  title?: String;
  bodyText?: String;
  url?: String;
}

export interface GitHubProjectCardItemUpsertNestedInput {
  update: GitHubProjectCardItemUpdateDataInput;
  create: GitHubProjectCardItemCreateInput;
}

export interface GitHubProjectCardUpdateManyMutationInput {
  gitHubId?: String;
  note?: String;
  url?: String;
}

export interface GitHubProjectCardItemUpdateInput {
  gitHubId?: String;
  title?: String;
  bodyText?: String;
  url?: String;
}

export interface GitHubProjectCardItemUpdateManyMutationInput {
  gitHubId?: String;
  title?: String;
  bodyText?: String;
  url?: String;
}

export interface GitHubProjectColumnCreateInput {
  gitHubId: String;
  gitHubProjectCards?: GitHubProjectCardCreateManyWithoutGitHubProjectColumnInput;
  name: String;
  purpose?: String;
}

export interface GitHubProjectCardCreateManyWithoutGitHubProjectColumnInput {
  create?:
    | GitHubProjectCardCreateWithoutGitHubProjectColumnInput[]
    | GitHubProjectCardCreateWithoutGitHubProjectColumnInput;
  connect?:
    | GitHubProjectCardWhereUniqueInput[]
    | GitHubProjectCardWhereUniqueInput;
}

export interface GitHubProjectCardCreateWithoutGitHubProjectColumnInput {
  gitHubId: String;
  gitHubProjectCardContent?: GitHubProjectCardItemCreateOneInput;
  note?: String;
  url: String;
}

export interface GitHubProjectColumnUpdateInput {
  gitHubId?: String;
  gitHubProjectCards?: GitHubProjectCardUpdateManyWithoutGitHubProjectColumnInput;
  name?: String;
  purpose?: String;
}

export interface GitHubProjectCardUpdateManyWithoutGitHubProjectColumnInput {
  create?:
    | GitHubProjectCardCreateWithoutGitHubProjectColumnInput[]
    | GitHubProjectCardCreateWithoutGitHubProjectColumnInput;
  delete?:
    | GitHubProjectCardWhereUniqueInput[]
    | GitHubProjectCardWhereUniqueInput;
  connect?:
    | GitHubProjectCardWhereUniqueInput[]
    | GitHubProjectCardWhereUniqueInput;
  disconnect?:
    | GitHubProjectCardWhereUniqueInput[]
    | GitHubProjectCardWhereUniqueInput;
  update?:
    | GitHubProjectCardUpdateWithWhereUniqueWithoutGitHubProjectColumnInput[]
    | GitHubProjectCardUpdateWithWhereUniqueWithoutGitHubProjectColumnInput;
  upsert?:
    | GitHubProjectCardUpsertWithWhereUniqueWithoutGitHubProjectColumnInput[]
    | GitHubProjectCardUpsertWithWhereUniqueWithoutGitHubProjectColumnInput;
  deleteMany?:
    | GitHubProjectCardScalarWhereInput[]
    | GitHubProjectCardScalarWhereInput;
  updateMany?:
    | GitHubProjectCardUpdateManyWithWhereNestedInput[]
    | GitHubProjectCardUpdateManyWithWhereNestedInput;
}

export interface GitHubProjectCardUpdateWithWhereUniqueWithoutGitHubProjectColumnInput {
  where: GitHubProjectCardWhereUniqueInput;
  data: GitHubProjectCardUpdateWithoutGitHubProjectColumnDataInput;
}

export interface GitHubProjectCardUpdateWithoutGitHubProjectColumnDataInput {
  gitHubId?: String;
  gitHubProjectCardContent?: GitHubProjectCardItemUpdateOneInput;
  note?: String;
  url?: String;
}

export interface GitHubProjectCardUpsertWithWhereUniqueWithoutGitHubProjectColumnInput {
  where: GitHubProjectCardWhereUniqueInput;
  update: GitHubProjectCardUpdateWithoutGitHubProjectColumnDataInput;
  create: GitHubProjectCardCreateWithoutGitHubProjectColumnInput;
}

export interface GitHubProjectCardScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubProjectCardScalarWhereInput[] | GitHubProjectCardScalarWhereInput;
  OR?: GitHubProjectCardScalarWhereInput[] | GitHubProjectCardScalarWhereInput;
  NOT?: GitHubProjectCardScalarWhereInput[] | GitHubProjectCardScalarWhereInput;
}

export interface GitHubProjectCardUpdateManyWithWhereNestedInput {
  where: GitHubProjectCardScalarWhereInput;
  data: GitHubProjectCardUpdateManyDataInput;
}

export interface GitHubProjectCardUpdateManyDataInput {
  gitHubId?: String;
  note?: String;
  url?: String;
}

export interface GitHubProjectColumnUpdateManyMutationInput {
  gitHubId?: String;
  name?: String;
  purpose?: String;
}

export interface GitHubReleaseCreateInput {
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeInput;
  url: String;
  gitHubTag?: GitHubTagCreateOneWithoutGitHubReleaseInput;
}

export interface GitHubTagCreateOneWithoutGitHubReleaseInput {
  create?: GitHubTagCreateWithoutGitHubReleaseInput;
  connect?: GitHubTagWhereUniqueInput;
}

export interface GitHubTagCreateWithoutGitHubReleaseInput {
  gitHubId: String;
  name: String;
}

export interface GitHubReleaseUpdateInput {
  gitHubId?: String;
  isDraft?: Boolean;
  publishedAt?: DateTimeInput;
  url?: String;
  gitHubTag?: GitHubTagUpdateOneWithoutGitHubReleaseInput;
}

export interface GitHubTagUpdateOneWithoutGitHubReleaseInput {
  create?: GitHubTagCreateWithoutGitHubReleaseInput;
  update?: GitHubTagUpdateWithoutGitHubReleaseDataInput;
  upsert?: GitHubTagUpsertWithoutGitHubReleaseInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GitHubTagWhereUniqueInput;
}

export interface GitHubTagUpdateWithoutGitHubReleaseDataInput {
  gitHubId?: String;
  name?: String;
}

export interface GitHubTagUpsertWithoutGitHubReleaseInput {
  update: GitHubTagUpdateWithoutGitHubReleaseDataInput;
  create: GitHubTagCreateWithoutGitHubReleaseInput;
}

export interface GitHubReleaseUpdateManyMutationInput {
  gitHubId?: String;
  isDraft?: Boolean;
  publishedAt?: DateTimeInput;
  url?: String;
}

export interface GitHubTagCreateInput {
  gitHubId: String;
  gitHubRelease: GitHubReleaseCreateOneWithoutGitHubTagInput;
  name: String;
}

export interface GitHubReleaseCreateOneWithoutGitHubTagInput {
  create?: GitHubReleaseCreateWithoutGitHubTagInput;
  connect?: GitHubReleaseWhereUniqueInput;
}

export interface GitHubReleaseCreateWithoutGitHubTagInput {
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeInput;
  url: String;
}

export interface GitHubTagUpdateInput {
  gitHubId?: String;
  gitHubRelease?: GitHubReleaseUpdateOneRequiredWithoutGitHubTagInput;
  name?: String;
}

export interface GitHubReleaseUpdateOneRequiredWithoutGitHubTagInput {
  create?: GitHubReleaseCreateWithoutGitHubTagInput;
  update?: GitHubReleaseUpdateWithoutGitHubTagDataInput;
  upsert?: GitHubReleaseUpsertWithoutGitHubTagInput;
  connect?: GitHubReleaseWhereUniqueInput;
}

export interface GitHubReleaseUpdateWithoutGitHubTagDataInput {
  gitHubId?: String;
  isDraft?: Boolean;
  publishedAt?: DateTimeInput;
  url?: String;
}

export interface GitHubReleaseUpsertWithoutGitHubTagInput {
  update: GitHubReleaseUpdateWithoutGitHubTagDataInput;
  create: GitHubReleaseCreateWithoutGitHubTagInput;
}

export interface GitHubTagUpdateManyMutationInput {
  gitHubId?: String;
  name?: String;
}

export interface GitHubProjectCardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubProjectCardWhereInput;
  AND?:
    | GitHubProjectCardSubscriptionWhereInput[]
    | GitHubProjectCardSubscriptionWhereInput;
  OR?:
    | GitHubProjectCardSubscriptionWhereInput[]
    | GitHubProjectCardSubscriptionWhereInput;
  NOT?:
    | GitHubProjectCardSubscriptionWhereInput[]
    | GitHubProjectCardSubscriptionWhereInput;
}

export interface GitHubProjectCardItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubProjectCardItemWhereInput;
  AND?:
    | GitHubProjectCardItemSubscriptionWhereInput[]
    | GitHubProjectCardItemSubscriptionWhereInput;
  OR?:
    | GitHubProjectCardItemSubscriptionWhereInput[]
    | GitHubProjectCardItemSubscriptionWhereInput;
  NOT?:
    | GitHubProjectCardItemSubscriptionWhereInput[]
    | GitHubProjectCardItemSubscriptionWhereInput;
}

export interface GitHubProjectColumnSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubProjectColumnWhereInput;
  AND?:
    | GitHubProjectColumnSubscriptionWhereInput[]
    | GitHubProjectColumnSubscriptionWhereInput;
  OR?:
    | GitHubProjectColumnSubscriptionWhereInput[]
    | GitHubProjectColumnSubscriptionWhereInput;
  NOT?:
    | GitHubProjectColumnSubscriptionWhereInput[]
    | GitHubProjectColumnSubscriptionWhereInput;
}

export interface GitHubReleaseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubReleaseWhereInput;
  AND?:
    | GitHubReleaseSubscriptionWhereInput[]
    | GitHubReleaseSubscriptionWhereInput;
  OR?:
    | GitHubReleaseSubscriptionWhereInput[]
    | GitHubReleaseSubscriptionWhereInput;
  NOT?:
    | GitHubReleaseSubscriptionWhereInput[]
    | GitHubReleaseSubscriptionWhereInput;
}

export interface GitHubTagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubTagWhereInput;
  AND?: GitHubTagSubscriptionWhereInput[] | GitHubTagSubscriptionWhereInput;
  OR?: GitHubTagSubscriptionWhereInput[] | GitHubTagSubscriptionWhereInput;
  NOT?: GitHubTagSubscriptionWhereInput[] | GitHubTagSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GitHubProjectCard {
  id: ID_Output;
  gitHubId: String;
  note?: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubProjectCardPromise
  extends Promise<GitHubProjectCard>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  gitHubProjectColumn: <T = GitHubProjectColumnPromise>() => T;
  gitHubProjectCardContent: <T = GitHubProjectCardItemPromise>() => T;
  note: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubProjectCardSubscription
  extends Promise<AsyncIterator<GitHubProjectCard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  gitHubProjectColumn: <T = GitHubProjectColumnSubscription>() => T;
  gitHubProjectCardContent: <T = GitHubProjectCardItemSubscription>() => T;
  note: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubProjectColumn {
  id: ID_Output;
  gitHubId: String;
  name: String;
  purpose?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubProjectColumnPromise
  extends Promise<GitHubProjectColumn>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  gitHubProjectCards: <T = FragmentableArray<GitHubProjectCard>>(
    args?: {
      where?: GitHubProjectCardWhereInput;
      orderBy?: GitHubProjectCardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  purpose: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubProjectColumnSubscription
  extends Promise<AsyncIterator<GitHubProjectColumn>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  gitHubProjectCards: <
    T = Promise<AsyncIterator<GitHubProjectCardSubscription>>
  >(
    args?: {
      where?: GitHubProjectCardWhereInput;
      orderBy?: GitHubProjectCardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  purpose: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubProjectCardItem {
  id: ID_Output;
  gitHubId: String;
  title: String;
  bodyText: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubProjectCardItemPromise
  extends Promise<GitHubProjectCardItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  title: () => Promise<String>;
  bodyText: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubProjectCardItemSubscription
  extends Promise<AsyncIterator<GitHubProjectCardItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  bodyText: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubProjectCardConnection {
  pageInfo: PageInfo;
  edges: GitHubProjectCardEdge[];
}

export interface GitHubProjectCardConnectionPromise
  extends Promise<GitHubProjectCardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubProjectCardEdge>>() => T;
  aggregate: <T = AggregateGitHubProjectCardPromise>() => T;
}

export interface GitHubProjectCardConnectionSubscription
  extends Promise<AsyncIterator<GitHubProjectCardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GitHubProjectCardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGitHubProjectCardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GitHubProjectCardEdge {
  node: GitHubProjectCard;
  cursor: String;
}

export interface GitHubProjectCardEdgePromise
  extends Promise<GitHubProjectCardEdge>,
    Fragmentable {
  node: <T = GitHubProjectCardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubProjectCardEdgeSubscription
  extends Promise<AsyncIterator<GitHubProjectCardEdge>>,
    Fragmentable {
  node: <T = GitHubProjectCardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubProjectCard {
  count: Int;
}

export interface AggregateGitHubProjectCardPromise
  extends Promise<AggregateGitHubProjectCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubProjectCardSubscription
  extends Promise<AsyncIterator<AggregateGitHubProjectCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GitHubProjectCardItemConnection {
  pageInfo: PageInfo;
  edges: GitHubProjectCardItemEdge[];
}

export interface GitHubProjectCardItemConnectionPromise
  extends Promise<GitHubProjectCardItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubProjectCardItemEdge>>() => T;
  aggregate: <T = AggregateGitHubProjectCardItemPromise>() => T;
}

export interface GitHubProjectCardItemConnectionSubscription
  extends Promise<AsyncIterator<GitHubProjectCardItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<GitHubProjectCardItemEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateGitHubProjectCardItemSubscription>() => T;
}

export interface GitHubProjectCardItemEdge {
  node: GitHubProjectCardItem;
  cursor: String;
}

export interface GitHubProjectCardItemEdgePromise
  extends Promise<GitHubProjectCardItemEdge>,
    Fragmentable {
  node: <T = GitHubProjectCardItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubProjectCardItemEdgeSubscription
  extends Promise<AsyncIterator<GitHubProjectCardItemEdge>>,
    Fragmentable {
  node: <T = GitHubProjectCardItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubProjectCardItem {
  count: Int;
}

export interface AggregateGitHubProjectCardItemPromise
  extends Promise<AggregateGitHubProjectCardItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubProjectCardItemSubscription
  extends Promise<AsyncIterator<AggregateGitHubProjectCardItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GitHubProjectColumnConnection {
  pageInfo: PageInfo;
  edges: GitHubProjectColumnEdge[];
}

export interface GitHubProjectColumnConnectionPromise
  extends Promise<GitHubProjectColumnConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubProjectColumnEdge>>() => T;
  aggregate: <T = AggregateGitHubProjectColumnPromise>() => T;
}

export interface GitHubProjectColumnConnectionSubscription
  extends Promise<AsyncIterator<GitHubProjectColumnConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<GitHubProjectColumnEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateGitHubProjectColumnSubscription>() => T;
}

export interface GitHubProjectColumnEdge {
  node: GitHubProjectColumn;
  cursor: String;
}

export interface GitHubProjectColumnEdgePromise
  extends Promise<GitHubProjectColumnEdge>,
    Fragmentable {
  node: <T = GitHubProjectColumnPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubProjectColumnEdgeSubscription
  extends Promise<AsyncIterator<GitHubProjectColumnEdge>>,
    Fragmentable {
  node: <T = GitHubProjectColumnSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubProjectColumn {
  count: Int;
}

export interface AggregateGitHubProjectColumnPromise
  extends Promise<AggregateGitHubProjectColumn>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubProjectColumnSubscription
  extends Promise<AsyncIterator<AggregateGitHubProjectColumn>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GitHubRelease {
  id: ID_Output;
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeOutput;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubReleasePromise
  extends Promise<GitHubRelease>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  isDraft: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  gitHubTag: <T = GitHubTagPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubReleaseSubscription
  extends Promise<AsyncIterator<GitHubRelease>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  isDraft: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  gitHubTag: <T = GitHubTagSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubTag {
  id: ID_Output;
  gitHubId: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubTagPromise extends Promise<GitHubTag>, Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  gitHubRelease: <T = GitHubReleasePromise>() => T;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubTagSubscription
  extends Promise<AsyncIterator<GitHubTag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  gitHubRelease: <T = GitHubReleaseSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubReleaseConnection {
  pageInfo: PageInfo;
  edges: GitHubReleaseEdge[];
}

export interface GitHubReleaseConnectionPromise
  extends Promise<GitHubReleaseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubReleaseEdge>>() => T;
  aggregate: <T = AggregateGitHubReleasePromise>() => T;
}

export interface GitHubReleaseConnectionSubscription
  extends Promise<AsyncIterator<GitHubReleaseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GitHubReleaseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGitHubReleaseSubscription>() => T;
}

export interface GitHubReleaseEdge {
  node: GitHubRelease;
  cursor: String;
}

export interface GitHubReleaseEdgePromise
  extends Promise<GitHubReleaseEdge>,
    Fragmentable {
  node: <T = GitHubReleasePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubReleaseEdgeSubscription
  extends Promise<AsyncIterator<GitHubReleaseEdge>>,
    Fragmentable {
  node: <T = GitHubReleaseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubRelease {
  count: Int;
}

export interface AggregateGitHubReleasePromise
  extends Promise<AggregateGitHubRelease>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubReleaseSubscription
  extends Promise<AsyncIterator<AggregateGitHubRelease>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GitHubTagConnection {
  pageInfo: PageInfo;
  edges: GitHubTagEdge[];
}

export interface GitHubTagConnectionPromise
  extends Promise<GitHubTagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubTagEdge>>() => T;
  aggregate: <T = AggregateGitHubTagPromise>() => T;
}

export interface GitHubTagConnectionSubscription
  extends Promise<AsyncIterator<GitHubTagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GitHubTagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGitHubTagSubscription>() => T;
}

export interface GitHubTagEdge {
  node: GitHubTag;
  cursor: String;
}

export interface GitHubTagEdgePromise
  extends Promise<GitHubTagEdge>,
    Fragmentable {
  node: <T = GitHubTagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubTagEdgeSubscription
  extends Promise<AsyncIterator<GitHubTagEdge>>,
    Fragmentable {
  node: <T = GitHubTagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubTag {
  count: Int;
}

export interface AggregateGitHubTagPromise
  extends Promise<AggregateGitHubTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubTagSubscription
  extends Promise<AsyncIterator<AggregateGitHubTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GitHubProjectCardSubscriptionPayload {
  mutation: MutationType;
  node: GitHubProjectCard;
  updatedFields: String[];
  previousValues: GitHubProjectCardPreviousValues;
}

export interface GitHubProjectCardSubscriptionPayloadPromise
  extends Promise<GitHubProjectCardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubProjectCardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubProjectCardPreviousValuesPromise>() => T;
}

export interface GitHubProjectCardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubProjectCardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubProjectCardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubProjectCardPreviousValuesSubscription>() => T;
}

export interface GitHubProjectCardPreviousValues {
  id: ID_Output;
  gitHubId: String;
  note?: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubProjectCardPreviousValuesPromise
  extends Promise<GitHubProjectCardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  note: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubProjectCardPreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubProjectCardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubProjectCardItemSubscriptionPayload {
  mutation: MutationType;
  node: GitHubProjectCardItem;
  updatedFields: String[];
  previousValues: GitHubProjectCardItemPreviousValues;
}

export interface GitHubProjectCardItemSubscriptionPayloadPromise
  extends Promise<GitHubProjectCardItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubProjectCardItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubProjectCardItemPreviousValuesPromise>() => T;
}

export interface GitHubProjectCardItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubProjectCardItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubProjectCardItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubProjectCardItemPreviousValuesSubscription>() => T;
}

export interface GitHubProjectCardItemPreviousValues {
  id: ID_Output;
  gitHubId: String;
  title: String;
  bodyText: String;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubProjectCardItemPreviousValuesPromise
  extends Promise<GitHubProjectCardItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  title: () => Promise<String>;
  bodyText: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubProjectCardItemPreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubProjectCardItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  bodyText: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubProjectColumnSubscriptionPayload {
  mutation: MutationType;
  node: GitHubProjectColumn;
  updatedFields: String[];
  previousValues: GitHubProjectColumnPreviousValues;
}

export interface GitHubProjectColumnSubscriptionPayloadPromise
  extends Promise<GitHubProjectColumnSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubProjectColumnPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubProjectColumnPreviousValuesPromise>() => T;
}

export interface GitHubProjectColumnSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubProjectColumnSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubProjectColumnSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubProjectColumnPreviousValuesSubscription>() => T;
}

export interface GitHubProjectColumnPreviousValues {
  id: ID_Output;
  gitHubId: String;
  name: String;
  purpose?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubProjectColumnPreviousValuesPromise
  extends Promise<GitHubProjectColumnPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  name: () => Promise<String>;
  purpose: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubProjectColumnPreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubProjectColumnPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  purpose: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubReleaseSubscriptionPayload {
  mutation: MutationType;
  node: GitHubRelease;
  updatedFields: String[];
  previousValues: GitHubReleasePreviousValues;
}

export interface GitHubReleaseSubscriptionPayloadPromise
  extends Promise<GitHubReleaseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubReleasePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubReleasePreviousValuesPromise>() => T;
}

export interface GitHubReleaseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubReleaseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubReleaseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubReleasePreviousValuesSubscription>() => T;
}

export interface GitHubReleasePreviousValues {
  id: ID_Output;
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeOutput;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubReleasePreviousValuesPromise
  extends Promise<GitHubReleasePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  isDraft: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubReleasePreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubReleasePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  isDraft: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubTagSubscriptionPayload {
  mutation: MutationType;
  node: GitHubTag;
  updatedFields: String[];
  previousValues: GitHubTagPreviousValues;
}

export interface GitHubTagSubscriptionPayloadPromise
  extends Promise<GitHubTagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubTagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubTagPreviousValuesPromise>() => T;
}

export interface GitHubTagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubTagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubTagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubTagPreviousValuesSubscription>() => T;
}

export interface GitHubTagPreviousValues {
  id: ID_Output;
  gitHubId: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubTagPreviousValuesPromise
  extends Promise<GitHubTagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubTagPreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubTagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "GitHubProjectCard",
    embedded: false
  },
  {
    name: "GitHubProjectCardItem",
    embedded: false
  },
  {
    name: "GitHubProjectColumn",
    embedded: false
  },
  {
    name: "GitHubRelease",
    embedded: false
  },
  {
    name: "GitHubTag",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
