// Code generated by Prisma (prisma@1.20.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  gitHubRelease: (where?: GitHubReleaseWhereInput) => Promise<boolean>;
  gitHubTag: (where?: GitHubTagWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gitHubRelease: (where: GitHubReleaseWhereUniqueInput) => GitHubReleasePromise;
  gitHubReleases: (
    args?: {
      where?: GitHubReleaseWhereInput;
      orderBy?: GitHubReleaseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubRelease>;
  gitHubReleasesConnection: (
    args?: {
      where?: GitHubReleaseWhereInput;
      orderBy?: GitHubReleaseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubReleaseConnectionPromise;
  gitHubTag: (where: GitHubTagWhereUniqueInput) => GitHubTagPromise;
  gitHubTags: (
    args?: {
      where?: GitHubTagWhereInput;
      orderBy?: GitHubTagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<GitHubTag>;
  gitHubTagsConnection: (
    args?: {
      where?: GitHubTagWhereInput;
      orderBy?: GitHubTagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GitHubTagConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGitHubRelease: (data: GitHubReleaseCreateInput) => GitHubReleasePromise;
  updateGitHubRelease: (
    args: {
      data: GitHubReleaseUpdateInput;
      where: GitHubReleaseWhereUniqueInput;
    }
  ) => GitHubReleasePromise;
  updateManyGitHubReleases: (
    args: {
      data: GitHubReleaseUpdateManyMutationInput;
      where?: GitHubReleaseWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubRelease: (
    args: {
      where: GitHubReleaseWhereUniqueInput;
      create: GitHubReleaseCreateInput;
      update: GitHubReleaseUpdateInput;
    }
  ) => GitHubReleasePromise;
  deleteGitHubRelease: (
    where: GitHubReleaseWhereUniqueInput
  ) => GitHubReleasePromise;
  deleteManyGitHubReleases: (
    where?: GitHubReleaseWhereInput
  ) => BatchPayloadPromise;
  createGitHubTag: (data: GitHubTagCreateInput) => GitHubTagPromise;
  updateGitHubTag: (
    args: { data: GitHubTagUpdateInput; where: GitHubTagWhereUniqueInput }
  ) => GitHubTagPromise;
  updateManyGitHubTags: (
    args: {
      data: GitHubTagUpdateManyMutationInput;
      where?: GitHubTagWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertGitHubTag: (
    args: {
      where: GitHubTagWhereUniqueInput;
      create: GitHubTagCreateInput;
      update: GitHubTagUpdateInput;
    }
  ) => GitHubTagPromise;
  deleteGitHubTag: (where: GitHubTagWhereUniqueInput) => GitHubTagPromise;
  deleteManyGitHubTags: (where?: GitHubTagWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gitHubRelease: (
    where?: GitHubReleaseSubscriptionWhereInput
  ) => GitHubReleaseSubscriptionPayloadSubscription;
  gitHubTag: (
    where?: GitHubTagSubscriptionWhereInput
  ) => GitHubTagSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GitHubReleaseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "isDraft_ASC"
  | "isDraft_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GitHubTagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gitHubId_ASC"
  | "gitHubId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GitHubReleaseWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export interface GitHubReleaseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  isDraft?: Boolean;
  isDraft_not?: Boolean;
  publishedAt?: DateTimeInput;
  publishedAt_not?: DateTimeInput;
  publishedAt_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_not_in?: DateTimeInput[] | DateTimeInput;
  publishedAt_lt?: DateTimeInput;
  publishedAt_lte?: DateTimeInput;
  publishedAt_gt?: DateTimeInput;
  publishedAt_gte?: DateTimeInput;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  gitHubTag?: GitHubTagWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubReleaseWhereInput[] | GitHubReleaseWhereInput;
  OR?: GitHubReleaseWhereInput[] | GitHubReleaseWhereInput;
  NOT?: GitHubReleaseWhereInput[] | GitHubReleaseWhereInput;
}

export interface GitHubTagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gitHubId?: String;
  gitHubId_not?: String;
  gitHubId_in?: String[] | String;
  gitHubId_not_in?: String[] | String;
  gitHubId_lt?: String;
  gitHubId_lte?: String;
  gitHubId_gt?: String;
  gitHubId_gte?: String;
  gitHubId_contains?: String;
  gitHubId_not_contains?: String;
  gitHubId_starts_with?: String;
  gitHubId_not_starts_with?: String;
  gitHubId_ends_with?: String;
  gitHubId_not_ends_with?: String;
  gitHubRelease?: GitHubReleaseWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: GitHubTagWhereInput[] | GitHubTagWhereInput;
  OR?: GitHubTagWhereInput[] | GitHubTagWhereInput;
  NOT?: GitHubTagWhereInput[] | GitHubTagWhereInput;
}

export type GitHubTagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  gitHubId?: String;
}>;

export interface GitHubReleaseCreateInput {
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeInput;
  url: String;
  gitHubTag?: GitHubTagCreateOneWithoutGitHubReleaseInput;
}

export interface GitHubTagCreateOneWithoutGitHubReleaseInput {
  create?: GitHubTagCreateWithoutGitHubReleaseInput;
  connect?: GitHubTagWhereUniqueInput;
}

export interface GitHubTagCreateWithoutGitHubReleaseInput {
  gitHubId: String;
  name: String;
}

export interface GitHubReleaseUpdateInput {
  gitHubId?: String;
  isDraft?: Boolean;
  publishedAt?: DateTimeInput;
  url?: String;
  gitHubTag?: GitHubTagUpdateOneWithoutGitHubReleaseInput;
}

export interface GitHubTagUpdateOneWithoutGitHubReleaseInput {
  create?: GitHubTagCreateWithoutGitHubReleaseInput;
  update?: GitHubTagUpdateWithoutGitHubReleaseDataInput;
  upsert?: GitHubTagUpsertWithoutGitHubReleaseInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GitHubTagWhereUniqueInput;
}

export interface GitHubTagUpdateWithoutGitHubReleaseDataInput {
  gitHubId?: String;
  name?: String;
}

export interface GitHubTagUpsertWithoutGitHubReleaseInput {
  update: GitHubTagUpdateWithoutGitHubReleaseDataInput;
  create: GitHubTagCreateWithoutGitHubReleaseInput;
}

export interface GitHubReleaseUpdateManyMutationInput {
  gitHubId?: String;
  isDraft?: Boolean;
  publishedAt?: DateTimeInput;
  url?: String;
}

export interface GitHubTagCreateInput {
  gitHubId: String;
  gitHubRelease: GitHubReleaseCreateOneWithoutGitHubTagInput;
  name: String;
}

export interface GitHubReleaseCreateOneWithoutGitHubTagInput {
  create?: GitHubReleaseCreateWithoutGitHubTagInput;
  connect?: GitHubReleaseWhereUniqueInput;
}

export interface GitHubReleaseCreateWithoutGitHubTagInput {
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeInput;
  url: String;
}

export interface GitHubTagUpdateInput {
  gitHubId?: String;
  gitHubRelease?: GitHubReleaseUpdateOneRequiredWithoutGitHubTagInput;
  name?: String;
}

export interface GitHubReleaseUpdateOneRequiredWithoutGitHubTagInput {
  create?: GitHubReleaseCreateWithoutGitHubTagInput;
  update?: GitHubReleaseUpdateWithoutGitHubTagDataInput;
  upsert?: GitHubReleaseUpsertWithoutGitHubTagInput;
  connect?: GitHubReleaseWhereUniqueInput;
}

export interface GitHubReleaseUpdateWithoutGitHubTagDataInput {
  gitHubId?: String;
  isDraft?: Boolean;
  publishedAt?: DateTimeInput;
  url?: String;
}

export interface GitHubReleaseUpsertWithoutGitHubTagInput {
  update: GitHubReleaseUpdateWithoutGitHubTagDataInput;
  create: GitHubReleaseCreateWithoutGitHubTagInput;
}

export interface GitHubTagUpdateManyMutationInput {
  gitHubId?: String;
  name?: String;
}

export interface GitHubReleaseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubReleaseWhereInput;
  AND?:
    | GitHubReleaseSubscriptionWhereInput[]
    | GitHubReleaseSubscriptionWhereInput;
  OR?:
    | GitHubReleaseSubscriptionWhereInput[]
    | GitHubReleaseSubscriptionWhereInput;
  NOT?:
    | GitHubReleaseSubscriptionWhereInput[]
    | GitHubReleaseSubscriptionWhereInput;
}

export interface GitHubTagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GitHubTagWhereInput;
  AND?: GitHubTagSubscriptionWhereInput[] | GitHubTagSubscriptionWhereInput;
  OR?: GitHubTagSubscriptionWhereInput[] | GitHubTagSubscriptionWhereInput;
  NOT?: GitHubTagSubscriptionWhereInput[] | GitHubTagSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GitHubRelease {
  id: ID_Output;
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeOutput;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubReleasePromise
  extends Promise<GitHubRelease>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  isDraft: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  gitHubTag: <T = GitHubTagPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubReleaseSubscription
  extends Promise<AsyncIterator<GitHubRelease>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  isDraft: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  gitHubTag: <T = GitHubTagSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubTag {
  id: ID_Output;
  gitHubId: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubTagPromise extends Promise<GitHubTag>, Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  gitHubRelease: <T = GitHubReleasePromise>() => T;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubTagSubscription
  extends Promise<AsyncIterator<GitHubTag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  gitHubRelease: <T = GitHubReleaseSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubReleaseConnection {}

export interface GitHubReleaseConnectionPromise
  extends Promise<GitHubReleaseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubReleaseEdge>>() => T;
  aggregate: <T = AggregateGitHubReleasePromise>() => T;
}

export interface GitHubReleaseConnectionSubscription
  extends Promise<AsyncIterator<GitHubReleaseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GitHubReleaseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGitHubReleaseSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GitHubReleaseEdge {
  cursor: String;
}

export interface GitHubReleaseEdgePromise
  extends Promise<GitHubReleaseEdge>,
    Fragmentable {
  node: <T = GitHubReleasePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubReleaseEdgeSubscription
  extends Promise<AsyncIterator<GitHubReleaseEdge>>,
    Fragmentable {
  node: <T = GitHubReleaseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubRelease {
  count: Int;
}

export interface AggregateGitHubReleasePromise
  extends Promise<AggregateGitHubRelease>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubReleaseSubscription
  extends Promise<AsyncIterator<AggregateGitHubRelease>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GitHubTagConnection {}

export interface GitHubTagConnectionPromise
  extends Promise<GitHubTagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GitHubTagEdge>>() => T;
  aggregate: <T = AggregateGitHubTagPromise>() => T;
}

export interface GitHubTagConnectionSubscription
  extends Promise<AsyncIterator<GitHubTagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GitHubTagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGitHubTagSubscription>() => T;
}

export interface GitHubTagEdge {
  cursor: String;
}

export interface GitHubTagEdgePromise
  extends Promise<GitHubTagEdge>,
    Fragmentable {
  node: <T = GitHubTagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GitHubTagEdgeSubscription
  extends Promise<AsyncIterator<GitHubTagEdge>>,
    Fragmentable {
  node: <T = GitHubTagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGitHubTag {
  count: Int;
}

export interface AggregateGitHubTagPromise
  extends Promise<AggregateGitHubTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGitHubTagSubscription
  extends Promise<AsyncIterator<AggregateGitHubTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GitHubReleaseSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GitHubReleaseSubscriptionPayloadPromise
  extends Promise<GitHubReleaseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubReleasePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubReleasePreviousValuesPromise>() => T;
}

export interface GitHubReleaseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubReleaseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubReleaseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubReleasePreviousValuesSubscription>() => T;
}

export interface GitHubReleasePreviousValues {
  id: ID_Output;
  gitHubId: String;
  isDraft: Boolean;
  publishedAt: DateTimeOutput;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubReleasePreviousValuesPromise
  extends Promise<GitHubReleasePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  isDraft: () => Promise<Boolean>;
  publishedAt: () => Promise<DateTimeOutput>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubReleasePreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubReleasePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  isDraft: () => Promise<AsyncIterator<Boolean>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GitHubTagSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GitHubTagSubscriptionPayloadPromise
  extends Promise<GitHubTagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GitHubTagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GitHubTagPreviousValuesPromise>() => T;
}

export interface GitHubTagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GitHubTagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GitHubTagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GitHubTagPreviousValuesSubscription>() => T;
}

export interface GitHubTagPreviousValues {
  id: ID_Output;
  gitHubId: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GitHubTagPreviousValuesPromise
  extends Promise<GitHubTagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gitHubId: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GitHubTagPreviousValuesSubscription
  extends Promise<AsyncIterator<GitHubTagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gitHubId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "GitHubRelease",
    embedded: false
  },
  {
    name: "GitHubTag",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
